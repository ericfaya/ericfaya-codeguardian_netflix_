name: process-pull-request

    
on:
    pull_request:
        types: [opened, synchronize, reopened]
        
permissions:
    
    contents: read
    pull-requests: write

jobs:
 process-pull-request:
    runs-on: ubuntu-latest
        
    env:
      GROQAPIKEY: ${{ secrets.GROQAPIKEY }}
      GROQMODEL: ${{ secrets.GROQMODEL }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      GROQAPIKEYSUMMARY: ${{ secrets.GROQAPIKEYSUMMARY }}
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Fetch base branch
        run: git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get PR SHAs
        run: |
          echo "PR_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PR_SHA_BASE=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV

      - name: Get files changed in latest commit of PR
        id: get_changed_files
        run: |
          # Usamos el √∫ltimo commit de la PR directamente
          git diff --name-only ${{ env.PR_SHA }}^ ${{ env.PR_SHA }} > changed_files.txt
          
          echo "üîç Archivos cambiados en el √∫ltimo commit:"
          cat changed_files.txt

      - name: Get Pull Request Info
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: List files for debugging
        run: ls -lah

      - name: Run CodeGuardian JAR
        run: |
          java -jar codeguardian-0.0.1-SNAPSHOT.jar  \
            ${{ env.GROQAPIKEY }} \
            ${{ env.GROQMODEL }} \
            ${{ env.GITHUB_TOKEN }} \
            ${{ env.REPO_OWNER }} \
            ericfaya-codeguardian_netflix_ \
            ${{ env.PR_NUMBER }} \
            changed_files.txt

      - name: Verificar ejecuci√≥n del JAR
        run: |
          if [ $? -eq 0 ]; then
            echo "‚úÖ JAR ejecutado exitosamente"
            exit 0
          else
            echo "‚ùå Error en la ejecuci√≥n del JAR"
            exit 1
          fi
          
      - name: Notificar en Teams (comentarios PR)
        if: success()
        run: |
            PR_NUMBER=${{ github.event.pull_request.number }}
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_AUTHOR="${{ github.event.pull_request.user.login }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            COMMIT_MSG=$(git log --no-merges -1 --pretty=%s)
            COMMIT_SHA=$(git log --no-merges -1 --pretty=%h)
            git fetch origin ${{ github.event.pull_request.base.ref }}
            DIFF=$(git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} --unified=0 | head -c 4000)

            echo "üìÑ Diff generado para el resumen:"
            echo "$DIFF"

            SUMMARY=$(
              curl -s https://api.groq.com/openai/v1/chat/completions \
                -H "Authorization: Bearer $GROQAPIKEYSUMMARY" \
                -H "Content-Type: application/json" \
                -d '{
                  "model": "compound-beta",
                  "messages": [
                    {
                      "role": "system",
                      "content": "Eres un revisor t√©cnico que resume Pull Requests para incluir un resumen breve, claro y profesional."
                    },
                    {
                      "role": "user",
                      "content": "Resume esta PR para incluirlo como comentario autom√°tico:\n\n'"${DIFF}"'"
                    }
                  ],
                  "temperature": 0.5
                }' | jq -r '.choices[0].message.content'
            )

            # Escapamos adecuadamente para JSON (s√≥lo \\ y \n)
            SUMMARY_ESCAPED=$(printf "%s" "$SUMMARY" | jq -Rs .)

            # Creamos mensaje base con saltos manuales y sin indentaci√≥n
            RAW_MESSAGE="üõ°Ô∏è CodeGuardian ha analizado la PR #${PR_NUMBER}\n"
            RAW_MESSAGE+="üîÄ ${PR_TITLE}\n"
            RAW_MESSAGE+="üë§ Autor: ${PR_AUTHOR}\n"
            RAW_MESSAGE+="üßæ Commit: ${COMMIT_SHA} - ${COMMIT_MSG}\n"
            RAW_MESSAGE+="üîó Ver Pull Request: ${PR_URL}\n"
            RAW_MESSAGE+="üí° Resumen:\n${SUMMARY}"

            # Escapamos todo correctamente
            FINAL_MESSAGE=$(printf "%s" "$RAW_MESSAGE" | jq -Rs .)

            curl -H "Content-Type: application/json" \
                 -d "{\"text\": ${FINAL_MESSAGE}}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}"
