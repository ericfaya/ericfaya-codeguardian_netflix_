name: process-pull-request

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  process-pull-request:
    runs-on: ubuntu-latest

    env:
      GROQAPIKEY: ${{ secrets.GROQAPIKEY }}
      GROQMODEL: ${{ secrets.GROQMODEL }}
      GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
      GROQAPIKEYSUMMARY: ${{ secrets.GROQAPIKEYSUMMARY }}

    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Fetch base branch
        run: git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get PR SHAs
        run: |
          echo "PR_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "PR_SHA_BASE=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV

      - name: Get files changed in latest commit of PR
        id: get_changed_files
        run: |
          git diff --name-only ${{ env.PR_SHA }}^ ${{ env.PR_SHA }} > changed_files.txt
          echo "üîç Archivos cambiados en el √∫ltimo commit:"
          cat changed_files.txt

      - name: Get Pull Request Info
        run: |
          echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "REPO_OWNER=${{ github.repository_owner }}" >> $GITHUB_ENV

      - name: Run CodeGuardian JAR
        run: |
          java -jar codeguardian-0.0.1-SNAPSHOT.jar  \
            ${{ env.GROQAPIKEY }} \
            ${{ env.GROQMODEL }} \
            ${{ env.GITHUB_TOKEN }} \
            ${{ env.REPO_OWNER }} \
            ericfaya-codeguardian_netflix_ \
            ${{ env.PR_NUMBER }} \
            changed_files.txt

      - name: Generar resumen t√©cnico con Groq y comentar en la PR + Teams
        run: |
          # ‚û§ Preparar inputs del prompt
          COMMITS=$(git log origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} --pretty=format:"- %s" | head -n 50)
          FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} | head -n 20)
          DIFFS=$(git diff origin/${{ github.event.pull_request.base.ref }}...${{ github.event.pull_request.head.sha }} --unified=0 | grep '^+[^+]' 2>/dev/null | head -n 50)
      
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          COMMIT_MSG=$(git log --no-merges -1 --pretty=%s)
          COMMIT_SHA=$(git log --no-merges -1 --pretty=%h)
      
          # ‚û§ Crear prompt t√©cnico
          PROMPT="Eres un revisor t√©cnico que resume Pull Requests para incluir un resumen breve, claro y profesional.
      
          Resume esta Pull Request con base en la siguiente informaci√≥n:
          
          üìù Commits recientes:
          $COMMITS
          
          üìÇ Archivos modificados:
          $FILES
          
          üîç Fragmentos de c√≥digo a√±adido:
          $DIFFS
      
          Escribe un resumen t√©cnico en una sola frase que abarque los principales cambios. Evita frases gen√©ricas y no incluyas explicaciones del estilo 'Este resumen puede ser usado...'."
      
          # ‚û§ Crear cuerpo JSON para Groq
          jq -n \
            --arg prompt "$PROMPT" \
            '{
              model: "llama3-70b-8192",
              messages: [{ role: "user", content: $prompt }],
              temperature: 0.3
            }' > summary_body.json
      
          # ‚û§ Llamada a Groq
          curl -s https://api.groq.com/openai/v1/chat/completions \
            -H "Authorization: Bearer $GROQAPIKEYSUMMARY" \
            -H "Content-Type: application/json" \
            -d @summary_body.json > groq_summary_output.json
      
          SUMMARY=$(jq -r '.choices[0].message.content' groq_summary_output.json)
      
          if [ -z "$SUMMARY" ] || [ "$SUMMARY" = "null" ]; then
            SUMMARY="(No se pudo generar el resumen)"
          fi
      
          # ‚û§ Comentario en la PR
          # COMMENT="üìù *Resumen t√©cnico generado por CodeGuardian*\n\n$SUMMARY"
          # gh pr comment $PR_NUMBER --body "$COMMENT"
      
          # ‚û§ Notificaci√≥n en Teams usando MessageCard para soportar saltos de l√≠nea
          ESCAPED_SUMMARY=$(echo "$SUMMARY" | jq -Rs .)
          
          cat <<EOF > teams_payload.json
          {
            "@type": "MessageCard",
            "@context": "http://schema.org/extensions",
            "summary": "Resumen de la PR",
            "themeColor": "0076D7",
            "title": "üõ°Ô∏è CodeGuardian ha analizado la PR #${PR_NUMBER}",
            "sections": [{
              "activityTitle": "*${PR_TITLE}*",
              "activitySubtitle": "Autor: ${PR_AUTHOR}",
              "facts": [
                { "name": "Commit", "value": "${COMMIT_SHA} - ${COMMIT_MSG}" },
                { "name": "Pull Request", "value": "[Ver en GitHub](${PR_URL})" }
              ],
              "text": $ESCAPED_SUMMARY
            }]
          }
          EOF

          curl -H "Content-Type: application/json" \
               -d @teams_payload.json \
               "${{ secrets.TEAMS_WEBHOOK_URL }}"
